name: deploy hetzner

on:
  push:
    branches: [ hetzner ]

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      # 2. Connect to Remote Server and Configure CloudWatch Agent
    - name: Install and Configure CloudWatch Agent on Remote Server
      uses: appleboy/ssh-action@v1.2.0
      with:
        host: ${{ secrets.REMOTE_HOST }}
        username: ${{ secrets.REMOTE_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Update system and install CloudWatch Agent
          wget https://amazoncloudwatch-agent.s3.amazonaws.com/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
          sudo dpkg -i -E ./amazon-cloudwatch-agent.deb
          
          # Create AWS credentials file for the CloudWatch Agent
          mkdir -p ~/.aws
          sudo tee ~/.aws/credentials > /dev/null <<EOF
          [AmazonCloudWatchAgent]
          aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          EOF
          
          # Create CloudWatch Agent configuration file
          sudo tee /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json > /dev/null <<EOF
          {
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/opt/traccar/logs/tracker-server.log",
                      "log_group_name": "traccar-hetzner-logs",
                      "log_stream_name": "traccar-hetzner-logs",
                      "timestamp_format": "%Y-%m-%d %H:%M:%S"
                    }
                  ]
                }
              }
            },
            "agent": {
              "region": "us-east-1"
            }
          }
          EOF
          
          # Start and enable the CloudWatch Agent
          sudo systemctl enable amazon-cloudwatch-agent
          sudo systemctl start amazon-cloudwatch-agent
          
          # Verify the agent status
          sudo systemctl status amazon-cloudwatch-agent
    - uses: actions/checkout@v4
    - uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'corretto'
    - run: |
        ./gradlew build -x checkstyleMain --no-daemon

    - name: Add env vars
      run: |
        echo "Environment=DATABASE_PASSWORD=${{ secrets.DB_PASSWORD }}" >> ./setup/traccar.service
        echo "Environment=DOMAIN=${{ vars.DOMAIN }}" >> ./setup/traccar.service
        echo "Environment=EMAIL=${{ vars.EMAIL }}" >> ./setup/traccar.service
        echo "Environment=EVENT_FORWARD_URL=${{ vars.EVENT_FORWARD_URL }}" >> ./setup/traccar.service
        echo "Environment=FORWARD_URL=${{ vars.FORWARD_URL }}" >> ./setup/traccar.service
        echo "Environment=GEOCODER_TYPE=${{ vars.GEOCODER_TYPE }}" >> ./setup/traccar.service
        echo "Environment=GEOCODER_URL=${{ vars.GEOCODER_URL }}" >> ./setup/traccar.service
        echo "Environment=REDIS_HOST=${{ vars.REDIS_HOST }}" >> ./setup/traccar.service
        echo "Environment=LOGGER_CONSOLE=false" >> ./setup/traccar.service

    - name: Build installers
      working-directory: ./setup
      run: |
        sudo apt-get install makeself
        wget -q https://corretto.aws/downloads/resources/11.0.25.9.1/amazon-corretto-11.0.25.9.1-linux-x64.tar.gz
        mkdir -p out/{conf,data,lib,logs,web,schema,templates,setup}
        cp -v ../target/tracker-server.jar out
        cp -v ../target/lib/* out/lib
        cp -v ../traccar.xml out/conf
        cp -v default.xml out/conf/setup
        cp -v setup.sh traccar.service out
        tar -xf amazon-corretto-11.0.25.9.1-linux-x64.tar.gz
        echo "jlink"
        jlink --module-path jdk-*/jmods --add-modules java.se,jdk.charsets,jdk.crypto.ec,jdk.unsupported --output out/jre
        rm -rf jdk-*
        echo "makeself"
        makeself --needroot --quiet --notemp out traccar.run "traccar" ./setup.sh
    - name: ssh deploy
      uses: easingthemes/ssh-deploy@main
      with:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        ARGS: "-rlgoDzvc -i"
        SOURCE: "setup/traccar.run"
        REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        REMOTE_USER: ${{ secrets.REMOTE_USER }}
        SCRIPT_AFTER: |
          sudo /home/${{ secrets.REMOTE_USER }}/traccar.run
          sudo service traccar start
          echo $RSYNC_STDOUT
